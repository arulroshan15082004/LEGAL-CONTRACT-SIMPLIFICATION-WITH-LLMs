import React, { useState, useEffect } from 'react';
import Header from './components/Header';
import Footer from './components/Footer';
import UploadDocument from './components/UploadDocument';
import TextComparison from './components/TextComparison';
import ReadabilityMetrics from './components/ReadabilityMetrics';
import { sampleDataset } from './data/sampleDataset';

function App() {
  const [originalText, setOriginalText] = useState<string>('');
  const [simplifiedText, setSimplifiedText] = useState<string>('');
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [readabilityMetrics, setReadabilityMetrics] = useState({
    originalScore: 0,
    simplifiedScore: 0,
    complexityReduction: 0,
    wordCountReduction: 0
  });
  const [currentExampleIndex, setCurrentExampleIndex] = useState<number | null>(null);

  // For demonstration, we'll simulate processing with a delay
  const processDocument = (text: string) => {
    setOriginalText(text);
    setIsProcessing(true);
    
    // Simulate API call to LLM service
    setTimeout(() => {
      // For demo purposes, we're using a simple simulation
      // In a real app, this would call an actual LLM API
      const simplifiedVersion = simulateSimplification(text);
      setSimplifiedText(simplifiedVersion);
      calculateMetrics(text, simplifiedVersion);
      setIsProcessing(false);
    }, 1500);
  };

  const simulateSimplification = (text: string): string => {
    // Check if the input matches any sample from our dataset
    const matchedSample = sampleDataset.find(
      sample => text.includes(sample.originalText)
    );
    
    if (matchedSample) {
      return matchedSample.simplifiedText;
    }
    
    // If no match, return a generic simplification
    return "This is a simplified version of the legal text. In a real application, this would be generated by a fine-tuned LLM that specializes in legal text simplification.";
  };

  const calculateMetrics = (original: string, simplified: string) => {
    // In a real application, these would be calculated using actual NLP metrics
    // For demo purposes, we're using simulated values
    
    // Calculate word counts
    const originalWordCount = original.split(/\s+/).filter(Boolean).length;
    const simplifiedWordCount = simplified.split(/\s+/).filter(Boolean).length;
    
    // Calculate word count reduction percentage
    const wordReduction = Math.round(
      ((originalWordCount - simplifiedWordCount) / originalWordCount) * 100
    );
    
    // Simulate readability scores (e.g., Flesch Reading Ease)
    // Higher score = more readable
    const originalReadability = Math.max(15, Math.min(40, 30 + Math.random() * 10));
    const simplifiedReadability = Math.max(65, Math.min(90, 75 + Math.random() * 15));
    
    // Calculate complexity reduction (based on simulated complexity measure)
    const complexityReduction = Math.round(
      ((simplifiedReadability - originalReadability) / originalReadability) * 100
    );
    
    setReadabilityMetrics({
      originalScore: originalReadability,
      simplifiedScore: simplifiedReadability,
      complexityReduction: complexityReduction,
      wordCountReduction: wordReduction
    });
  };

  const loadExample = (index: number) => {
    setCurrentExampleIndex(index);
    const example = sampleDataset[index];
    setOriginalText(example.originalText);
    setSimplifiedText(example.simplifiedText);
    
    // Calculate metrics for the example
    calculateMetrics(example.originalText, example.simplifiedText);
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Header />
      
      <main className="flex-grow container mx-auto px-4 py-6">
        <div className="max-w-4xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-[#2C3E50] mb-2">Legal Contract Simplification</h1>
            <p className="text-gray-600">
              Upload a legal document to get a simplified version in plain English, 
              or try one of our examples to see how it works.
            </p>
          </div>
          
          {/* Example selector */}
          <div className="mb-6 bg-white p-4 rounded-lg shadow-sm border border-gray-200">
            <h2 className="text-lg font-semibold text-[#2C3E50] mb-3">Try an Example</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
              {sampleDataset.slice(0, 6).map((example, index) => (
                <button
                  key={example.id}
                  onClick={() => loadExample(index)}
                  className={`p-3 text-left rounded-md transition-all duration-300 border ${
                    currentExampleIndex === index 
                      ? 'border-[#E6B31E] bg-[#FFF8E5]' 
                      : 'border-gray-200 hover:border-gray-300 bg-white hover:bg-gray-50'
                  }`}
                >
                  <div className="font-medium text-[#2C3E50]">{example.category}</div>
                  <div className="text-xs text-gray-500 mt-1 truncate">
                    {example.originalText.substring(0, 60)}...
                  </div>
                </button>
              ))}
            </div>
          </div>
          
          {/* Document upload area */}
          <UploadDocument onDocumentUpload={processDocument} />
          
          {/* Loading state */}
          {isProcessing && (
            <div className="flex justify-center items-center p-12">
              <div className="text-center">
                <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[#E6B31E] mb-4"></div>
                <p className="text-[#2C3E50]">Processing your document...</p>
              </div>
            </div>
          )}
          
          {/* Results area - only show if we have both texts */}
          {originalText && simplifiedText && !isProcessing && (
            <>
              <ReadabilityMetrics
                originalScore={readabilityMetrics.originalScore}
                simplifiedScore={readabilityMetrics.simplifiedScore}
                complexityReduction={readabilityMetrics.complexityReduction}
                wordCountReduction={readabilityMetrics.wordCountReduction}
              />
              
              <TextComparison 
                originalText={originalText}
                simplifiedText={simplifiedText}
              />
            </>
          )}
        </div>
      </main>
      
      <Footer />
    </div>
  );
}

export default App;